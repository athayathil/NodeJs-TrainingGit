


what .js-program can do on web-page in browser-envi ?

using browser provided web-apis, 
.js-program can do any dynamic-actions on web-page

browser provided APIs ==> w3c recommendations

e.g  DOM, XHR, Timer, ...

using DOM API
-------------
 ---> can create,retreive,update,delete HTML elements
 ---> can change element's inner text/html content
 ---> can change element's attributes/properties
 ---> can change element's style
 ---> can listen events on elements
 ---> can validate form-fields before submit
 ---> can create rich UI components

using XHR
-----------
 ---> can comminicate with server-side async, update resp in existing page

using Timer API
---------------
 ---> can execute any action on time timeout/interval


HTML5 APIs
-----------
ref:
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5


--------------------------------------------------------------




limitations with plain-JavaScript
---------------------------------

   ==> browser compatability
   ==> performance issues ( i,e DOM query,manipulation )
   ==> memory management issues  ( i. clean un-used DOM elements )
   ==> data-binding/flow manuly need to manage
   ==> code organization is difficult
   ..


 soln : using third-party's JS lib & F.Ws

    -> jQuery



    MVC/MVVM based F.Ws
    --------------------
        -> knockout
        -> backbone , marionet js
        -> Angularjs
        -> Emberjs
        ...

        -> DOJO
        -> Ext JS  from sencha  ( commericial )



    Web-component( custom-element)  based lib & F.w
    ----------------------------------------------

    1.  React  v16
    2.  Angular v5
    3.  Vue
    4.  Polymerjs
    ...

    ---------------------------------------------


    .js-lang

      ==> single-threaded lang , we can do concurrent actions
      ==> all IO operations are 'non-blocking'

      ------------------------------------------

      browser e.g chrome

      1. JS-runtime/engine  ( v8 )  ==> ECMAScript spec

            a. single-call-stack -> to execute contexts
            b. heap              -> to hold objects

      2. Web Apis ( i.e DOM, XHR , etc.. ) ==> w3c  recommendations    

      3. Event/Message/Callback Queue  

      4. Event-Loop

      ----------------------------------------------
